{
	"info": {
		"_postman_id": "1e2aacfb-6012-4a55-b552-ed23bacb8c5a",
		"name": "HW2_Group_30",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20820839"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// HW_2 Postman\r",
							"\r",
							"// http://162.55.220.72:5005/first\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"// 3. Проверить, что в body приходит правильный string.\r",
							"\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// HW_2 Postman\r",
							"\r",
							"// http://162.55.220.72:5005/user_info_3\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"// 3. Спарсить response body в json.\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"// 7. Спарсить request.\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Name is correct\", function () {\r",
							"    // var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Alesandro\");\r",
							"});\r",
							"\r",
							"pm.test(\"Age is correct\", function () {\r",
							"    // var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.age).to.eql(\"33\");\r",
							"});\r",
							"\r",
							"pm.test(\"Salary is correct\", function () {\r",
							"    // var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.salary).to.eql(500);\r",
							"});\r",
							"\r",
							"let req = request.data\r",
							"\r",
							"pm.test(\"ReqName = RespName\", function () {\r",
							"    // var jsonData = pm.response.json();\r",
							"    pm.expect(req.name).to.eql(jsonData.name);\r",
							"});\r",
							"\r",
							"pm.test(\"ReqAge = RespAge\", function () {\r",
							"    // var jsonData = pm.response.json();\r",
							"    pm.expect(req.age).to.eql(jsonData.age);\r",
							"});\r",
							"\r",
							"pm.test(\"ReqSalary = RespSalary\", function () {\r",
							"    // var jsonData = pm.response.json();\r",
							"    pm.expect(req.salary).to.eql(String(jsonData.salary));\r",
							"});\r",
							"\r",
							"console.log(jsonData.family)\r",
							"\r",
							"\r",
							"\r",
							"let salaryX = req.salary*4\r",
							"// console.log(salaryX)\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"salary 1.5 year is correct\", function () {\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(salaryX);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// HW_2 Postman\r",
							"\r",
							"// http://162.55.220.72:5005/object_info_3\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"// 4. Спарсить request.\r",
							"\r",
							"\r",
							"let resp = pm.response.json();\r",
							"let req = pm.request.url.query.toObject();\r",
							"// console.log(req.name)\r",
							"\r",
							"\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test(\"name match\", function () {\r",
							"    pm.expect(req.name).to.eql(resp.name);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"pm.test(\"age match\", function () {\r",
							"    pm.expect(resp.age).to.eql(req.age);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"salary match\", function () {\r",
							"    pm.expect(+req.salary).to.eql(+resp.salary);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"\r",
							"console.log(resp.family)\r",
							"\r",
							"\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"\r",
							"pm.test(\"Dog name(key)\", function () {\r",
							"    // pm.expect(resp.family.pets.dog).to.include(\"name\");\r",
							"    pm.expect(resp.family.pets.dog).to.have.property('name')\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"\r",
							"pm.test(\"Dog age (key)\", function () {\r",
							"    pm.expect(resp.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky\r",
							"\r",
							"pm.test(\"Dog name (valye)\", function () {\r",
							"    pm.expect(resp.family.pets.dog.name).to.include(\"Luky\");\r",
							"});\r",
							"\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"\r",
							"pm.test(\"Dog age (valye)\", function () {\r",
							"    pm.expect(JSON.stringify(resp.family.pets.dog.age)).to.include(4);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name={{name}}&age={{age}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Anatoly_object_info_3.1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// HW_2 Postman\r",
							"\r",
							"// ДЗ от Толи Postman\r",
							"// // Supermassive black hole, [Jun 27, 2022 at 11:15:36 PM]:\r",
							"// // собственно домашка\r",
							"\r",
							"\r",
							"// 3. http://162.55.220.72:5005/object_info_3\r",
							"//  Преобразовать задания 5-7 (сравнить идентичные поля в реквесте и респонсе) таким образом, чтобы это делалось ЗА ОДИН \r",
							"// ТЕСТ (сразу все 3 поля) БЕЗ ЦИКЛОВ! (глубокое сравнение объектов)\r",
							"\r",
							"let resp = pm.response.json();\r",
							"let req = pm.request.url.query.toObject();\r",
							"\r",
							"function deepEqual(req, resp) {\r",
							"  if (req.name == resp.name) {\r",
							"    return true;\r",
							"  }\r",
							"\r",
							"  if (req.age == resp.age) {\r",
							"    return true;\r",
							"  }\r",
							"\r",
							"  if (+req.salary == +resp.salary ) {\r",
							"    return true;\r",
							"  }\r",
							"  else  {return false}\r",
							"  }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name={{name}}&age={{age}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// HW_2 Postman\r",
							"\r",
							"// http://162.55.220.72:5005/object_info_4\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"// 3. Спарсить response body в json.\r",
							"\r",
							"let resp = pm.response.json();\r",
							"\r",
							"\r",
							"// 4. Спарсить request.\r",
							"\r",
							"let req = pm.request.url.query.toObject()\r",
							"\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test(\"Your test name\", function () {\r",
							"    pm.expect(resp.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"\r",
							"pm.test(\"Your test age\", function () {\r",
							"    pm.expect(JSON.stringify(resp.age)).to.eql(req.age);\r",
							"});\r",
							"\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"\r",
							"console.log(req.salary)\r",
							"\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"\r",
							"console.log(resp.salary)\r",
							"\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"\r",
							"console.log(resp.salary[0])\r",
							"\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"\r",
							"console.log(resp.salary[1])\r",
							"\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"\r",
							"console.log(resp.salary[2])\r",
							"\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"test salary\", function () {;\r",
							"    pm.expect(JSON.stringify(resp.salary[0])).to.eql(req.salary);\r",
							"});\r",
							"\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"test salary X2\", function () {\r",
							"    pm.expect(resp.salary[1]).to.eql(JSON.stringify(req.salary*2));\r",
							"});\r",
							"\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"test salary X3\", function () {\r",
							"    pm.expect(resp.salary[2]).to.eql(JSON.stringify(req.salary*3));\r",
							"});\r",
							"\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"\r",
							"pm.environment.set(\"name\");\r",
							"\r",
							"\r",
							"// 16. Создать в окружении переменную age\r",
							"\r",
							"pm.environment.set(\"age\");\r",
							"\r",
							"\r",
							"// 17. Создать в окружении переменную salary\r",
							"\r",
							"pm.environment.set(\"salary\");\r",
							"\r",
							"// 18. Передать в окружение переменную name\r",
							"\r",
							"pm.environment.set(\"name\", req.name);\r",
							"\r",
							"\r",
							"// 19. Передать в окружение переменную age\r",
							"\r",
							"pm.environment.set(\"age\", req.age);\r",
							"\r",
							"\r",
							"// 20. Передать в окружение переменную salary\r",
							"\r",
							"pm.environment.set(\"salary\", req.salary);\r",
							"\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"\r",
							"\r",
							"// console.log(resp.salary.length)\r",
							"\r",
							"// for(i = 0; i < resp.salary.length; i++){\r",
							"//     console.log(resp.salary[i])\r",
							"// }\r",
							"\r",
							"for(var key in resp.salary){\r",
							"    console.log(resp.salary[key])\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Anatoly_object_info_4.1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// // HW_2 Postman\r",
							"\r",
							"// ДЗ от Толи Postman\r",
							"// // Supermassive black hole, [Jun 27, 2022 at 11:15:36 PM]:\r",
							"// // собственно домашка\r",
							"\r",
							"// 2. http://162.55.220.72:5007/object_info_4\r",
							"// * Преобразовать пункты 12-13-14 (salary из реквеста и респонса равны) таким образом, чтобы проверка производилась \r",
							"// циклом, в котором будет всего ОДИН тест. Имя теста должно меняться в зависимости от значения в Salary"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// HW_2 Postman\r",
							"\r",
							"// http://162.55.220.72:5005/user_info_2\r",
							"// 1. Вставить параметр salary из окружения в request\r",
							"\r",
							"pm.environment.get(\"salary\");\r",
							"\r",
							"\r",
							"// 2. Вставить параметр age из окружения в request\r",
							"\r",
							"pm.environment.get(\"age\");\r",
							"\r",
							"\r",
							"// 3. Вставить параметр name из окружения в request\r",
							"\r",
							"pm.environment.get(\"name\");\r",
							"\r",
							"\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"\r",
							"// pm.test(\"Status code 200\", function () {\r",
							"//     pm.response.to.have.status(\"OK\");\r",
							"// });\r",
							"\r",
							"pm.test(\"Status code 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"});\r",
							"\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"\r",
							"let resp = pm.response.json();\r",
							"\r",
							"// 7. Спарсить request.\r",
							"\r",
							"let req = request.data\r",
							"\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"\r",
							"pm.test(\"start salary\", function () {\r",
							"    pm.expect(resp).to.have.property('start_qa_salary');\r",
							"});\r",
							"\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"\r",
							"pm.test(\"salary after 6 months\", function () {\r",
							"    pm.expect(resp).to.have.property('qa_salary_after_6_months');\r",
							"});\r",
							"\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"\r",
							"pm.test(\"salary after 12 months\", function () {\r",
							"    pm.expect(resp).to.have.property('qa_salary_after_12_months');\r",
							"});\r",
							"\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"\r",
							"pm.test(\"salary after 1.5 year\", function () {\r",
							"    pm.expect(resp).to.have.property('qa_salary_after_1.5_year');\r",
							"});\r",
							"\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"\r",
							"pm.test(\"salary after 3.5 tears\", function () {\r",
							"    pm.expect(resp).to.have.property('qa_salary_after_3.5_years')\r",
							"});\r",
							"\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"\r",
							"pm.test(\"test person\", function () {\r",
							"    pm.expect(resp).to.have.property('person');\r",
							"});\r",
							"\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"// console.log(req.salary)\r",
							"\r",
							"pm.test(\"check salary\", function () {\r",
							"    pm.expect(JSON.stringify(resp.start_qa_salary)).to.eql(req.salary);\r",
							"});\r",
							"\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"check salary X2\", function () {\r",
							"    pm.expect(resp.qa_salary_after_6_months).to.eql(req.salary*2);\r",
							"});\r",
							"\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"CHECK salary X2.7\", function () {\r",
							"    pm.expect(resp.qa_salary_after_12_months).to.eql(req.salary*2.7);\r",
							"});\r",
							"\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"check salary X3.3\", function () {\r",
							"    pm.expect(resp[\"qa_salary_after_1.5_year\"]).to.eql(req.salary*3.3);\r",
							"});\r",
							"\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"check salary X3.8\", function () {\r",
							"    pm.expect(resp['qa_salary_after_3.5_years']).to.eql(req.salary*3.8);\r",
							"});\r",
							"\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"test u_name[1]\", function () {\r",
							"    pm.expect(JSON.stringify(resp.person.u_name[1])).to.eql(req.salary);\r",
							"});\r",
							"\r",
							"\r",
							"// pm.test(\"test u_name[1]\", function () {\r",
							"//     pm.expect(String(resp.person.u_name[1])).to.eql(req.salary);\r",
							"// });\r",
							"\r",
							"\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"\r",
							"\r",
							"pm.test(\"check u_age\", function () {\r",
							"    pm.expect(String(resp.person.u_age)).to.eql(req.age);\r",
							"});\r",
							"\r",
							"// pm.test(\"check u_age\", function () {\r",
							"//     pm.expect(JSON.stringify(resp.person.u_age)).to.eql(req.age);\r",
							"// });\r",
							"\r",
							"\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"CHECK salary X4.2\", function () {\r",
							"    pm.expect(resp.person.u_salary_5_years).to.eql(req.salary*4.2);\r",
							"});\r",
							"\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"\r",
							"\r",
							"for ( key in resp.person){\r",
							"    console.log(resp.person[key])\r",
							"} \r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Anatoly_user_info_2_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ДЗ от Толи Postman\r",
							"// Supermassive black hole, [Jun 27, 2022 at 11:15:36 PM]:\r",
							"// собственно домашка\r",
							"\r",
							"\r",
							"// 1. (ОБЯЗАТЕЛЬНОЕ И ВАЖНЕЙШЕЕ ЗАДАНИЕ) http://162.55.220.72:5005/user_info_2\r",
							"// Необходимо провести тестирование API данного эндпоинта на валидацию входных параметров. Суть задания: проверить \r",
							"// валидации каждого поля, подаваемого в эндпоинт на возможные значения. Будем УСЛОВНО считать, что негативная проверка \r",
							"// должна возвращать какой угодно статус НО НЕ 200! Ваша задача написать тест кейсы в постмане таким образом, что одна \r",
							"// негативная проверка - один запрос, позитивные проверки можно объединять в 1. Ваша задача протестировать исходя из \r",
							"// требований на все возможные аспекты. В каждом запросе тест ТОЛЬКО НА СТАТУС КОД (200 - позитивное значение, не \r",
							"// 200 - негативное). \r",
							"// P.S. ЗАДАНИЕ НЕ ПОДРАЗУМЕВАЕТ, ЧТО ЭНДПОИНТ РАБОТАЕТ СОГЛАСНО НАПИСАННЫМ ТРЕБОВАНИЯМ. МЫ УЧИМСЯ ПИСАТЬ ТЕСТЫ НА API!\r",
							"// Требования:\r",
							"// 1) Name: 3-40 символов включительно, запрещены префиксные и постфиксные пробелы. Поле обязательное\r",
							"// 2) Age: только целые цифры в диапазоне 18-120 включительно. Поле обязательное\r",
							"// 3) Salary: только целые цифры в диапазоне 1-1000000 включительно. Поле обязательное\r",
							"\r",
							"// 1****. Преобразовать задание 1 таким образом, чтобы вы отправляли параметры через CSV файл. У вас будет ровно 1 \r",
							"// запрос в коллекции, который будет повторяться столько раз, сколько строк в CSV файле. Также должна быть написана \r",
							"// функция в тестах, которая проверяет валидность входящих данных, и в зависимости от этого проверяет на статус 200 или \r",
							"// НЕ 200.\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Anatoly_user_info_2_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ДЗ от Толи Postman\r",
							"// Supermassive black hole, [Jun 27, 2022 at 11:15:36 PM]:\r",
							"// собственно домашка\r",
							"\r",
							"\r",
							"// 4. http://162.55.220.72:5005/user_info_2\r",
							"// 1)  Преобразовать задания 8 - 13 (проверить что в json имеется нужный параметр) таким образом, чтобы все проверки \r",
							"// делались в цикле (1 проверка в цикле, в которую попадают нужные параметры). Название теста должно видоизменяться \r",
							"// исходя из подаваемых данных. ( ${}  или другим способом)\r",
							"// 2) ** Преобразовать задания 14 - 18 (проверить что параметр равен salary умножить на коэффициент) таким образом, \r",
							"// чтобы все проверки делались в цикле (1 проверка в цикле, в которую попадают нужные параметры). Название теста должно \r",
							"// видоизменяться исходя из подаваемых данных. ( ${}  или другим способом)\r",
							"// 3) *** Преобразовать описанные выше задания 1 и 2 для данного эндпоинта в ОДИН ЦИКЛ, в котором будут проходить ОБА \r",
							"// теста.\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}